{	function myScript(thisOBJ){		var scriptVersion = "1.00";			function checkForUpdate(showAlert)		{			var reply = '';			//socket			conn = new Socket;			// se connecter a duduf.com			if (conn.open ('robslegtenhorst.com:80'))			{				// recuperer la version actuelle				//check AE Version				var reV = /^(\d+\.?\d*)/i;				var v = app.version.match(reV);				delete reV;				var userAgent = 'User-Agent: Duik/' + scriptVersion + ' (' + $.os + ')' + ' AE/' + v[0];				if (conn.writeln('GET /mindful/typewriter_version.txt  HTTP/1.0\n' + userAgent + '\nHost: robslegtenhorst.com\n'))					reply = conn.read(1000);				conn.close();				delete v;				//chercher la version dans la reponse du serveur :				var reponse = reply.lastIndexOf('version',reply.length);				if(reponse != -1)				{					newVersion = reply.slice(reponse+8,reply.length+1);					//alert(scriptVersion);					//20alert(newVersion);					if (showAlert && scriptVersion != newVersion) alert("A new version of MindfulScripts is available,\ngo to https://github.com/robslegtenhorst/MindfulEducation to download it");					return newVersion;				}			}		}				var scriptName = "TypeWriter";		var myPanel;		var activeItem;		var frameRateVar;				var startPoint = "layerIn";				var framesPerCharFast = 0.8;				var framesPerCharSlow = 1.6;				function onStartChange () 		{			if (myPanel.grp.groupInputPos.rightRadio.value == true)			{				startPoint = "currTime";			} else if (myPanel.grp.groupInputPos.leftRadio.value == true)			{				startPoint = "layerIn";			}		}				function removeContents(selectedLayer, propAmount)		{			for (var j = 0; j < propAmount; j++) {				try {					selectedLayer.property("Text").property("Animators").property(1).remove();				} catch (e){					//				}			}						addAnimationFast(selectedLayer);		}				function removeContentsSlow(selectedLayer, propAmount)		{			for (var j = 0; j < propAmount; j++) {				try {					selectedLayer.property("Text").property("Animators").property(1).remove();				} catch (e){					//				}			}						addAnimationSlow(selectedLayer);		}			function addAnimationFast(selectedLayer)		{			var animator1 = selectedLayer.Text.Animators.addProperty("ADBE Text Animator");			var selector1 = animator1.Selectors.addProperty("ADBE Text Selector");			var opacity1 = animator1.Properties.addProperty("ADBE Text Opacity");						var textString = String(selectedLayer.Text.sourceText.value);			var textLength = Number(textString.length); //5						var layerIn = Number(frameRateVar * selectedLayer.inPoint) / frameRateVar; //0			var animationDuration = Number((framesPerCharFast * textLength) / frameRateVar);			var endTime = 0;						var currTime = Number(activeItem.time);												if (startPoint == "layerIn")			{				endTime = Number(layerIn + animationDuration);								selector1.property("Start").setValueAtTime(layerIn, 0);				selector1.property("Start").setValueAtTime(endTime, 100);			} else if (startPoint == "currTime"){				endTime = Number(currTime + animationDuration);								selector1.property("Start").setValueAtTime(currTime, 0);				selector1.property("Start").setValueAtTime(endTime, 100);			}									selector1.property("Advanced").property("Smoothness").setValue(0);						opacity1.setValue(0);		}			function addAnimationSlow(selectedLayer)		{			var animator1 = selectedLayer.Text.Animators.addProperty("ADBE Text Animator");			var selector1 = animator1.Selectors.addProperty("ADBE Text Selector");			var opacity1 = animator1.Properties.addProperty("ADBE Text Opacity");						var textString = String(selectedLayer.Text.sourceText.value);			var textLength = Number(textString.length); //5						var layerIn = Number(frameRateVar * selectedLayer.inPoint) / frameRateVar; //0			var animationDuration = Number((framesPerCharSlow * textLength) / frameRateVar);			var endTime = 0;						var currTime = Number(activeItem.time);												if (startPoint == "layerIn")			{				endTime = Number(layerIn + animationDuration);								selector1.property("Start").setValueAtTime(layerIn, 0);				selector1.property("Start").setValueAtTime(endTime, 100);			} else if (startPoint == "currTime"){				endTime = Number(currTime + animationDuration);								selector1.property("Start").setValueAtTime(currTime, 0);				selector1.property("Start").setValueAtTime(endTime, 100);			}									selector1.property("Advanced").property("Smoothness").setValue(0);						opacity1.setValue(0);		}				function onCreateFastButtonClick()		{			var counterLayer = 0;			var counterParam= 0;						activeItem = app.project.activeItem;						if ((activeItem == null) || !(activeItem instanceof CompItem)) {				alert("Please select or open a composition first.", scriptName);			} else {				var selectedLayers = activeItem.selectedLayers;				frameRateVar = Number(activeItem.frameRate);								if (activeItem.selectedLayers.length == 0) {					alert("Please select at least one layer in the active comp first.", scriptName);				} else {					app.beginUndoGroup("Add Fast Text Animation");										for (var i = 0; i < selectedLayers.length; i++) {						try {														var propAmount = selectedLayers[i].property("Text").property("Animators").numProperties;														if (propAmount > 0)							{								if (confirm("Text Animation is already present. Would you like to replace the current animation?", true, "Please confirm")) 								{									removeContents(selectedLayers[i], propAmount);								} else {									addAnimationFast(selectedLayers[i]);								}							} else {								addAnimationFast(selectedLayers[i]);							}													} catch (e){							var alertContent = "Layer \"" + selectedLayers[i].name + "\" is not a text layer."							alert(alertContent);						}					}										app.endUndoGroup();				}			}		}				function onCreateSlowButtonClick()		{			var counterLayer = 0;			var counterParam= 0;						activeItem = app.project.activeItem;						if ((activeItem == null) || !(activeItem instanceof CompItem)) {				alert("Please select or open a composition first.", scriptName);			} else {				var selectedLayers = activeItem.selectedLayers;				frameRateVar = Number(activeItem.frameRate);								if (activeItem.selectedLayers.length == 0) {					alert("Please select at least one layer in the active comp first.", scriptName);				} else {					app.beginUndoGroup("Add Slow Text Animation");										for (var i = 0; i < selectedLayers.length; i++) {						try {														var propAmount = selectedLayers[i].property("Text").property("Animators").numProperties;														if (propAmount > 0)							{								if (confirm("Text Animation is already present. Would you like to replace the current animation?", true, "Please confirm")) 								{									removeContentsSlow(selectedLayers[i], propAmount);								} else {									addAnimationSlow(selectedLayers[i]);								}							} else {								addAnimationSlow(selectedLayers[i]);							}													} catch (e){							var alertContent = "Layer \"" + selectedLayers[i].name + "\" is not a text layer."							alert(alertContent);						}					}										app.endUndoGroup();				}			}		}				function onRemoveButtonClick()		{			var counterLayer = 0;			var counterParam= 0;						var activeItem = app.project.activeItem;			if ((activeItem == null) || !(activeItem instanceof CompItem)) {				alert("Please select or open a composition first.", scriptName);			} else {				var selectedLayers = activeItem.selectedLayers;				if (activeItem.selectedLayers.length == 0) {					alert("Please select at least one layer in the active comp first.", scriptName);				} else {					app.beginUndoGroup("Remove Text Animation");										for (var i = 0; i < selectedLayers.length; i++) {						try {														var propAmount = selectedLayers[i].property("Text").property("Animators").numProperties;							for (var j = 0; j < propAmount; j++) {								try {									var propName = "Animator "+j;									selectedLayers[i].property("Text").property("Animators").property(1).remove();									counterParam++;								} catch (e){									//								}							}							counterLayer++;							//alert("deleted");						} catch (e) {							//alert("not found");						}					}										if (counterParam > 0 && counterLayer > 0)					{						var alertString = counterParam+" Params deleted from "+counterLayer+" layers";						alert(alertString, scriptName);					} else {						alert("No text animation found. Make sure the selected layer has Animator Params.", scriptName);					}										app.endUndoGroup();				}			}						/*			var layerColl = app.project.activeItem.layers;			alert("layerColl : ");			for (var i = 1; i <= layerColl.length; ++i) {				var curLayer = layerColl[i];								alert(curLayer.property("Text").property("Animators"));								if (curLayer.property("Text").property("Animators").length > 0) {					alert("found");				}								if (curLayer.selectedProperties && curLayer.selectedProperties.length > 0) {					var selProps = curLayer.selectedProperties;					for (var propIdx = 0; propIdx < selProps.length; ++propIdx ) {						alert("propIdx");						//ConvertPropertyToMarkers(curLayer.marker, selProps[propIdx]);					}				}			}			*/					}				function myScript_buildUI(thisOBJ){			checkForUpdate(true);			myPanel = (thisOBJ instanceof Panel) ? thisOBJ : new Window("palette", "ME - Typewriter", undefined, {resizeable:true});						res = "group{orientation:'column', alignment:['fill','fill'], alignChildren:['fill','fill'], preferredSize: [200,800],\						groupInputPos: Group{orientation:'row', alignment:['fill','top'], alignChildren:['fill','top'],\							alignmentText:StaticText{text:'Start Point:', alignment:['left','top']},\							leftRadio:RadioButton{text:'Layer In', value:true, alignment:['right','top']},\							rightRadio:RadioButton{text:'Current Time', alignment:['right','top']},\						},\						groupTitle_01: Group{orientation:'row', alignment:['fill','bottom'],\							alignmentText:StaticText{text:'Create Animation:', alignment:['left','top']},\						},\						groupCreate: Group{orientation:'row', alignment:['fill','bottom'],\							createFastButton:Button{text:'Fast', alignment:['middle','top']},\							createSlowButton:Button{text:'Slow', alignment:['middle','top']},\						},\						groupTitle_02: Group{orientation:'row', alignment:['fill','bottom'],\							alignmentText:StaticText{text:'Remove ALL Text Animation:', alignment:['left','top']},\						},\						groupRemove: Group{orientation:'row', alignment:['fill','bottom'],\							removeButton:Button{text:'Remove', alignment:['middle','top']},\						},\					}";						myPanel.grp = myPanel.add(res);						myPanel.grp.groupInputPos.leftRadio.onClick = onStartChange;			myPanel.grp.groupInputPos.rightRadio.onClick = onStartChange;					myPanel.grp.groupCreate.createFastButton.onClick = onCreateFastButtonClick;			myPanel.grp.groupCreate.createSlowButton.onClick = onCreateSlowButtonClick;						myPanel.grp.groupRemove.removeButton.onClick = onRemoveButtonClick;							myPanel.layout.layout(true);			myPanel.grp.minimumSize = myPanel.grp.size;						myPanel.layout.resize();			myPanel.onResizing = myPanel.onResize = function(){this.layout.resize()};						return myPanel;		}			var myScriptPal = myScript_buildUI(thisOBJ);				if ((myScriptPal != null) && (myScriptPal instanceof Window))		{			myScriptPal.center();			myScriptPal.show();		}		}	myScript(this);}